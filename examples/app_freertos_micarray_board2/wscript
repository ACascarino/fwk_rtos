import os

import xwaf.utils.configs as xutils

def options(ctx):
    ctx.add_option('--config', action='store', default='Default')


def list_configs(ctx):
    for config in CONFIGS.keys():
        print(config)


def configure(conf):
    def make_config(name, flags):
        conf.setenv(name)
        conf.load('xwaf.compiler_xcc')

        conf.env.XCC_FLAGS = SHARED_FLAGS + flags
        
    for key, value in CONFIGS.items():
        make_config(key, value)


def build(bld):
    if not xutils.check_build_config(bld, CONFIGS):
        return

    depends_on = [
        'FreeRTOS-Plus-TCP',
        'lib_soc',
        'lib_otpinfo',
        'lib_ethernet',
        'lib_random',
        'lib_mic_array',
        'lib_mic_array_board_support',
        'lib_i2c',
        'lib_i2s'
    ]
    
    bld.env.XTCP_STACK = 'UIP'
    bld.env.PROJECT_ROOT = '../../..'
    bld.env.TARGET_ARCH = XN_FILE_MAP[bld.variant]
    bld.env.XSCOPE = bld.path.find_resource('config.xscope')
    
    app_sources = bld.path.ant_glob(['src/**/*.c', 'src/**/*.S'])  
    bitstream_sources = bld.path.ant_glob(['bitstream_src/**/*.xc', 'bitstream_src/**/*.c', 'bitstream_src/**/*.S'])
    
    sources = app_sources + bitstream_sources

    includes = [ 'src', 'bitstream_src']
        
    optional_headers = ['FreeRTOSIPConfig.h', 'xcore_trace_config.h']

    prog = bld.program(
        source=sources,
        includes=includes,
        optional_headers=optional_headers,
        depends_on=depends_on)


SHARED_FLAGS = [
    '-Os', '-g', '-report', '-fxscope',
    '-Wxcore-fptrgroup',
    '-DDEBUG_PRINT_ENABLE=1'
]

XN_FILE_MAP = {
	'Default': 'MIC-ARRAY-1V3.xn'
}

CONFIGS = {
    'Default': ['']
}

xutils.register_configs(CONFIGS)
